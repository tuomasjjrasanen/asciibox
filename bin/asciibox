#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright © 2015 Tuomas Räsänen

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import division
from __future__ import absolute_import
from __future__ import print_function

import codecs
import optparse
import sys

import asciibox

def _parse_args(argv):
    render_options = {}
    parser = optparse.OptionParser(version=asciibox.LONG_VERSION,
                                   description=asciibox.DESCRIPTION)


    format_choices_str = ", ".join([repr(s) for s in asciibox.OUTPUT_FORMATS])

    parser.add_option("-i", "--input-file", metavar="FILE",
                      help="input file, defaults to standard input")
    parser.add_option("-o", "--output-file", metavar="FILE",
                      help="output file, defaults to standard output")
    parser.add_option("-t", "--output-format", metavar="FORMAT", type="choice",
                      choices=asciibox.OUTPUT_FORMATS,
                      help="output format (choose from %s)" % format_choices_str)
    parser.add_option("-s", "--scale", metavar="SCALE", type=float, default=8.0,
                      help="scale output geometry by SCALE factor, defaults to %default")

    options, args = parser.parse_args(argv)

    if len(args) > 1:
        parser.error("invalid number of arguments (%d), expected 1" % len(args))

    if options.input_file is None:
        options.input_file = sys.stdin
    else:
        options.input_file = codecs.open(options.input_file,
                                         encoding=sys.stdin.encoding)

    if options.output_file is None:
        options.output_file = sys.stdout

    if options.output_format is not None:
        render_options["output_format"] = options.output_format

    if options.scale is not None:
        render_options["scale_x"] = options.scale
        render_options["scale_y"] = options.scale

    return options, render_options

def _main():
    options, render_options = _parse_args(sys.argv)
    text = unicode(options.input_file.read())
    asciibox.render(text, options.output_file, **render_options)

if __name__ == "__main__":
    try:
        _main()
    except asciibox.Error, e:
        print("error:", e, file=sys.stderr)
        sys.exit(1)
